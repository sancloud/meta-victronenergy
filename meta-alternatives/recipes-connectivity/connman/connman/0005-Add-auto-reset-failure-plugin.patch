From 1024a9c93c82a1ec066b12e01cdea85e3927cf1b Mon Sep 17 00:00:00 2001
From: Mans Rullgard <mans@mansr.com>
Date: Thu, 15 Sep 2016 12:27:42 +0100
Subject: [PATCH 5/5] Add auto reset failure plugin

---
 Makefile.plugins    |   5 ++
 configure.ac        |   5 ++
 include/setting.h   |   1 +
 plugins/arfailure.c | 136 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/connman.h       |   1 +
 src/main.c          |  17 +++++++
 src/service.c       |   5 ++
 7 files changed, 170 insertions(+)
 create mode 100644 plugins/arfailure.c

diff --git a/Makefile.plugins b/Makefile.plugins
index b01fd808d481..230351284873 100644
--- a/Makefile.plugins
+++ b/Makefile.plugins
@@ -171,6 +171,11 @@ builtin_modules += pacrunner
 builtin_sources += plugins/pacrunner.c
 endif
 
+if ARFAILURE
+builtin_modules += arfailure
+builtin_sources += plugins/arfailure.c
+endif
+
 if POLKIT
 builtin_modules += polkit
 builtin_sources += plugins/polkit.c
diff --git a/configure.ac b/configure.ac
index 6e66ab3d74f0..5a58d19bccc1 100644
--- a/configure.ac
+++ b/configure.ac
@@ -279,6 +279,11 @@ AC_ARG_ENABLE(nmcompat, AC_HELP_STRING([--enable-nmcompat],
 			[enable_nmcompat=${enableval}], [enable_nmcompat="no"])
 AM_CONDITIONAL(NMCOMPAT, test "${enable_nmcompat}" != "no")
 
+AC_ARG_ENABLE(arfailure, AC_HELP_STRING([--enable-arfailure],
+				[enable auto reset failure plugin]),
+				[enable_arfailure=${enableval}], [enable_arfailure="no"])
+AM_CONDITIONAL(ARFAILURE, test "${enable_arfailure}" != "no")
+
 AC_ARG_ENABLE(polkit, AC_HELP_STRING([--enable-polkit],
 				[enable PolicyKit support]),
 			[enable_polkit=${enableval}], [enable_polkit="no"])
diff --git a/include/setting.h b/include/setting.h
index a88202176f5e..6829c6fd4ce0 100644
--- a/include/setting.h
+++ b/include/setting.h
@@ -34,6 +34,7 @@ unsigned int *connman_setting_get_uint_list(const char *key);
 
 unsigned int connman_timeout_input_request(void);
 unsigned int connman_timeout_browser_launch(void);
+int connman_auto_reset_failure_timeout(void);
 
 #ifdef __cplusplus
 }
diff --git a/plugins/arfailure.c b/plugins/arfailure.c
new file mode 100644
index 000000000000..b5c8e417f43b
--- /dev/null
+++ b/plugins/arfailure.c
@@ -0,0 +1,136 @@
+/*
+ *
+ *  Connection Manager
+ *
+ *  Copyright (C) 2007-2012  Intel Corporation. All rights reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License version 2 as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#define CONNMAN_API_SUBJECT_TO_CHANGE
+#include <connman/plugin.h>
+#include <connman/log.h>
+#include <connman/notifier.h>
+#include <connman/service.h>
+
+#include <glib.h>
+
+static int timeout = -1;
+static GHashTable* queued_services;
+
+static gboolean timer_callback (gpointer user_data) {
+	struct connman_service *service = user_data;
+
+	DBG("service %p", service);
+
+	/*
+	 * Use steal so unqueue_service is not called,
+	 * as unqueueing is already done when this function returns FALSE.
+	 */
+	g_hash_table_steal(queued_services, service);
+
+	__connman_service_clear_error(service);
+
+	__connman_service_auto_connect(CONNMAN_SERVICE_CONNECT_REASON_AUTO);
+
+	return FALSE;
+}
+
+static void queue_service (struct connman_service *service) {
+	guint tag;
+
+	tag = g_timeout_add_seconds(timeout, &timer_callback, service);
+	g_hash_table_insert (queued_services, service, GUINT_TO_POINTER(tag));
+
+	DBG("service %p tag %u", service, tag);
+}
+
+static void unqueue_service(gpointer data) {
+	guint tag = GPOINTER_TO_UINT(data);
+
+	DBG("tag %u", tag);
+
+	g_source_remove (tag);
+}
+
+static void service_state_changed(struct connman_service *service,
+					enum connman_service_state state)
+{
+	DBG("service %p state %d", service, state);
+
+	if (state == CONNMAN_SERVICE_STATE_FAILURE &&
+			__connman_service_get_favorite(service)) {
+		queue_service(service);
+	}
+}
+
+static void service_remove(struct connman_service *service)
+{
+	DBG("service %p", service);
+
+	g_hash_table_remove(queued_services, service);
+
+}
+
+static struct connman_notifier notifier = {
+	.name				= "arfailure",
+	.priority			= CONNMAN_NOTIFIER_PRIORITY_LOW,
+	.service_state_changed	= service_state_changed,
+	.service_remove 	= service_remove,
+};
+
+static int arfailure_init(void)
+{
+	timeout = connman_auto_reset_failure_timeout();
+	DBG("timeout %d", timeout);
+
+	if (timeout < 0) {
+		return 0;
+	}
+
+	queued_services = g_hash_table_new_full(&g_direct_hash, &g_direct_equal,
+													NULL, &unqueue_service);
+	if (!queued_services)
+		return -1;
+
+	if (connman_notifier_register(&notifier)) {
+		g_hash_table_destroy(queued_services);
+		return -1;
+	}
+
+	return 0;
+}
+
+static void arfailure_exit(void)
+{
+	DBG("");
+
+	if (timeout < 0)
+		return;
+
+	connman_notifier_unregister(&notifier);
+
+	g_hash_table_remove_all(queued_services);
+
+	g_hash_table_destroy(queued_services);
+}
+
+CONNMAN_PLUGIN_DEFINE(arfailure, "Auto failure reset",
+			VERSION, CONNMAN_PLUGIN_PRIORITY_LOW,
+			arfailure_init, arfailure_exit)
diff --git a/src/connman.h b/src/connman.h
index e849ed86eb0d..d47dc48a23c8 100644
--- a/src/connman.h
+++ b/src/connman.h
@@ -688,6 +688,7 @@ struct connman_network *__connman_service_get_network(struct connman_service *se
 enum connman_service_security __connman_service_get_security(struct connman_service *service);
 const char *__connman_service_get_phase2(struct connman_service *service);
 bool __connman_service_wps_enabled(struct connman_service *service);
+bool __connman_service_get_favorite(struct connman_service *service);
 int __connman_service_set_favorite(struct connman_service *service,
 						bool favorite);
 int __connman_service_set_favorite_delayed(struct connman_service *service,
diff --git a/src/main.c b/src/main.c
index 7acc2b594eb1..d3b6828a18d9 100644
--- a/src/main.c
+++ b/src/main.c
@@ -41,6 +41,7 @@
 
 #define DEFAULT_INPUT_REQUEST_TIMEOUT (120 * 1000)
 #define DEFAULT_BROWSER_LAUNCH_TIMEOUT (300 * 1000)
+#define DEFAULT_AUTO_RESET_FAILURE_TIMEOUT (-1)
 
 #define MAINFILE "main.conf"
 #define CONFIGMAINFILE CONFIGDIR "/" MAINFILE
@@ -77,6 +78,7 @@ static struct {
 	bool persistent_tethering_mode;
 	bool enable_6to4;
 	bool ignore_invalid_key;
+	int auto_reset_failure_timeout;
 } connman_settings  = {
 	.bg_scan = true,
 	.pref_timeservers = NULL,
@@ -92,6 +94,7 @@ static struct {
 	.persistent_tethering_mode = false,
 	.enable_6to4 = false,
 	.ignore_invalid_key = false,
+	.auto_reset_failure_timeout = DEFAULT_AUTO_RESET_FAILURE_TIMEOUT,
 };
 
 #define CONF_BG_SCAN                    "BackgroundScanning"
@@ -108,6 +111,7 @@ static struct {
 #define CONF_PERSISTENT_TETHERING_MODE  "PersistentTetheringMode"
 #define CONF_ENABLE_6TO4                "Enable6to4"
 #define CONF_IGNORE_INVALID_KEY         "IgnoreInvalidKey"
+#define CONF_AUTO_RESET_FAILURE_TIMEOUT "AutoResetFailureTimeout"
 
 static const char *supported_options[] = {
 	CONF_BG_SCAN,
@@ -124,6 +128,7 @@ static const char *supported_options[] = {
 	CONF_PERSISTENT_TETHERING_MODE,
 	CONF_ENABLE_6TO4,
 	CONF_IGNORE_INVALID_KEY,
+	CONF_AUTO_RESET_FAILURE_TIMEOUT,
 	NULL
 };
 
@@ -378,6 +383,13 @@ static void parse_config(GKeyFile *config)
 		connman_settings.ignore_invalid_key = boolean;
 
 	g_clear_error(&error);
+
+	timeout = g_key_file_get_integer(config, "General",
+			CONF_AUTO_RESET_FAILURE_TIMEOUT, &error);
+	if (!error && timeout >= -1)
+		connman_settings.auto_reset_failure_timeout = timeout;
+
+	g_clear_error(&error);
 }
 
 static int config_init(const char *file)
@@ -599,6 +611,11 @@ unsigned int connman_timeout_browser_launch(void)
 	return connman_settings.timeout_browserlaunch;
 }
 
+int connman_auto_reset_failure_timeout(void)
+{
+	return connman_settings.auto_reset_failure_timeout;
+}
+
 int main(int argc, char *argv[])
 {
 	GOptionContext *context;
diff --git a/src/service.c b/src/service.c
index dfa3edf3b033..66b402b69c85 100644
--- a/src/service.c
+++ b/src/service.c
@@ -6597,6 +6597,11 @@ enum connman_service_state __connman_service_get_state(struct connman_service *s
 	return service->state;
 }
 
+bool __connman_service_get_favorite(struct connman_service *service)
+{
+	return service->favorite;
+}
+
 unsigned int __connman_service_get_order(struct connman_service *service)
 {
 	unsigned int order = 0;
-- 
2.10.0

